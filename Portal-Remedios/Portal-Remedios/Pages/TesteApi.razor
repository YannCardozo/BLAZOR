@page "/TesteApi"
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@using MudBlazor;
@using remedios;
@using Newtonsoft.Json;
@using Portal_Remedios.Models;


    <div class="row mb-3 text-center" id="Linha-teste-api-cabecalho">
        <div class="col-12">
            <h3 class="mx-auto">Espaço para testes de api aqui</h3>
        </div>
    </div>
    <div class="row mb-3" id="Linha-botao-teste-api">
        <div class="col-4 mx-auto">

            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="Rodar">
                Requisitar API
            </MudButton>
        </div>
    </div>

    @if (liguei == true)
    {   <style>
            #Linha-teste-api-cabecalho{
                    display: none;
            }
            #Linha-botao-teste-api{
                    display: none;
            }
        </style>
        <div class="row mb-3 text-center mx-auto my-auto">
            <div class="col-12">
                <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;align-self:center;align-content:center;margin-top:250px;" Indeterminate="true" />
            </div>
        </div>
    }
    @if (rodando == true && liguei == false )
    {
        <h3>ESTOU RODANDO !!!!! @resultado[0]</h3>
        <br />
    <br />
    if (remedioteste.Count > 0)
    {
        var c = 0;
        
        <p>Teste Começou agora:</p>
        <MudSimpleTable Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Style="overflow-x: auto;">
            <thead>
                <tr>
                    @foreach (var h in headings)
                    {
                        <th>@h</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var row in rows)
                {
                    <tr>
                        @foreach (var x in c)
                        {

                            foreach (Remedios r in remedioteste)
                            {
                                <td>Id: @r.Id</td>
                                <td>Nome: @r.Nome</td>
                                <td>Código: @r.Codigo</td>
                                <td>Código ANS: @r.Codigo_ANS</td>
                                <td>Data/lote: @r.Data_lote</td>
                                <td>Dt Depósito: @r.Data_deposito</td>
                                <td>Tipo: @r.Tipo_remedio</td>
                                <td>Classificação: @r.Cor</td>
                                //<p>Região: @remedioteste.Nome_Regiao</p>
                                //<p>Unidade: @remedioteste.Nome_Unidade</p>
                                <td>Imagem: @r.Img_Remedio</td>

                            }
                            c++;
                        }
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
        <MudToolBar>
            <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
            <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
            <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
            <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>
        </MudToolBar>
        <hr />
            <p>Teste FINALIZOU</p>
        }

    }
@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;

    string[] headings = { "ID", "Nome", "Codigo", "Codigo ANS", "Data Lote" , "Data Deposito" , "Tipo Remedio" , "Classificacao" , "Imagem"};
    string[] rows = {
        @"1 Krishna kpartner0@usatoday.com Male 28.25.250.202",
        @"2 Webb wstitle1@ning.com Male 237.168.134.114",
        @"3 Nathanil nneal2@cyberchimps.com Male 92.6.0.175",
        @"4 Adara alockwood3@patch.com Female 182.174.217.152",
        @"5 Cecilius cchaplin4@shinystat.com Male 195.124.144.18",
        @"6 Cicely cemerine9@soup.io Female 138.94.191.43",
    };

}
@code {
    private string errorMessage;
    bool rodando = false;
    string resultado = "";
    public List<Remedios> remedioteste = new();
    bool liguei = false;


    async Task Rodar()
    {
        liguei = true;
        try
        {
         /*
         var request = new HttpRequestMessage(HttpMethod.Get,
         "https://api.github.com/repos/dotnet/AspNetCore.Docs/branches");
         request.Headers.Add("Accept", "application/vnd.github.v3+json");
         request.Headers.Add("User-Agent", "HttpClientFactory-Sample");
            *
            *
            using var httpResponse = await HttpClient.GetAsync("https://reqres.in/invalid-url");

            if (!httpResponse.IsSuccessStatusCode)
            {
            // set error message for display, log to console and return
            errorMessage = httpResponse.ReasonPhrase;
                        Console.WriteLine($"There was an error! {errorMessage}");
                return;
                }


                HttpClient cliente = new HttpClient();


                var result = await cliente.GetStringAsync("https://localhost:5001/Remedios");
        string checkResult = result.ToString();
        cliente.Dispose();
        return checkResult;
                */

            HttpClient cliente = new HttpClient();
            resultado = await cliente.GetStringAsync("https://localhost:5001/Remedios/");

            if(resultado == null)
            {
                await JsRuntime.InvokeVoidAsync("alert", resultado + " RETORNO NULL");
                rodando = false;
                return ;
            }

            rodando = true;
            //rever esse remedio teste para fazer o retorno JSON funcionar.

            //Console.WriteLine(resultado);

            // await JsRuntime.InvokeVoidAsync("alert", "Cadastro do " + " efetuado com sucesso!" + resultado + "funcionou");
            if (rodando == true)
            {
                Thread.Sleep(2000);
                remedioteste = JsonConvert.DeserializeObject<List<Remedios>>(resultado);
                liguei = false;
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            liguei = false;
            await JsRuntime.InvokeVoidAsync("alert", "ERRO" + ex.Message);
        }

    }
}
